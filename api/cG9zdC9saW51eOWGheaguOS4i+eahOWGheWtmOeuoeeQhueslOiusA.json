{"title":"linux内核下的内存管理笔记","date":"2018-09-06T08:52:08.000Z","slug":"linux内核下的内存管理笔记","updated":"2018-09-06T10:26:52.000Z","content":"<h3 id=\"关于内核内存\"><a href=\"#关于内核内存\" class=\"headerlink\" title=\"关于内核内存\"></a>关于内核内存</h3><p>因为在做内核方面的技术,所以想要对内核内存管理做一些分析,之前看雪的老哥给我发了一些他对physmap见解,果然大佬就是大佬,做什么都能看到很深的点.<br>关于physmap在32位下其实就是ZONE_NORMAL区域,在内核分配内存的时候,一般都是从ZONE_NORMAL区域开始分配.而mmap一开始会在ZONE_HIGHMEM进行分配,一旦ZONE_HIGHMEM区域不够,就会从ZONE_NORMAL区域进行内存分配,所以才有mmap的对象可以覆盖掉内核对象的情况出现.</p>\n<h3 id=\"两张图\"><a href=\"#两张图\" class=\"headerlink\" title=\"两张图\"></a>两张图</h3><p>这两图非常nice,看书的时候内存管理看得我一脸懵逼,这些图总算能让我对内存分配有一些基本了解.</p>\n<p>第一张图:</p>\n<p><img src=\"/img/mem1.jpg\" alt=\"第一张图\"></p>\n<p>在linux内核中，所有的物理内存都用struct page结构来描述，这些对象以数组形式存放，而这个数组的地址就是mem_map。</p>\n<p>第二张图:<br><img src=\"/img/mem2.jpg\" alt=\"第二张图\"></p>\n<p>__alloc_pages是底层的函数用来分配页面.<br>图中显示(我发现4.10.6和2.6.36差别还是很大的= =)do_brk()和do_mmap()都调用了do_mmap_pgoff(),do_mmap_pgoff()调用了get_unmapped_area().</p>\n<blockquote>\n<p>进程调用mmap()时，只是在进程空间内新增了一块相应大小的缓冲区，并设置了相应的访问标识，但并没有建立进程空间到物理页面的映射。因此，第一次访问该空间时，会引发一个缺页异常。 </p>\n<p>Mmap映射在第一次读写的时候，会进入缺页异常处理流程中，最后会调用<br>do_anonymous_page<br>—&gt;alloc_zeroed_user_highpage_movable<br>—&gt;__alloc_zeroed_user_highpage<br>—&gt;alloc_page_vma(GFP_HIGHUSER | movableflags,vma, vaddr);<br>看一下GFP_HIGHUSER定义</p>\n<p>#define GFP_HIGHUSER    (GFP_USER | <strong>GFP_HIGHMEM)\n</strong>GFP_HIGHMEM表示优先从高端内存区分配</p>\n</blockquote>\n<h3 id=\"关于slab\"><a href=\"#关于slab\" class=\"headerlink\" title=\"关于slab\"></a>关于slab</h3><p>slab的话怎么讲,就是内核准备了很多的内存块块,如果你要用我就分配给你.<br>看图:<br><img src=\"/img/slab.png\" alt=\"第三张图\"><br>看,kmalloc有8-8192很多类型的slab,也就是说,kmalloc使用了slab进行内存的分配.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> __always_inline <span class=\"keyword\">void</span> *__do_kmalloc(<span class=\"keyword\">size_t</span> size, <span class=\"keyword\">gfp_t</span> flags,</span><br><span class=\"line\">\t\t\t\t\t  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> caller)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">kmem_cache</span> *<span class=\"title\">cachep</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *ret;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcachep = kmalloc_slab(size, flags);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (unlikely(ZERO_OR_NULL_PTR(cachep)))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cachep;</span><br><span class=\"line\">\tret = slab_alloc(cachep, flags, caller);</span><br><span class=\"line\"></span><br><span class=\"line\">\tkasan_kmalloc(cachep, ret, size, flags);</span><br><span class=\"line\">\ttrace_kmalloc(caller, ret,</span><br><span class=\"line\">\t\t      size, cachep-&gt;size, flags);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如刚才所有，我们看到有些SLAB的名字比较特别，如TCP,UDP,dquot这些，它们都是专用SLAB，专属于它们自己的模块。而后面这张图，如kmalloc-8，kmalloc-16…还有dma-kmalloc-96，dma-kmalloc-192…这些都是普通SLAB，当需要为一些小数据分配内存时(比如一个结构体)，就会从这些普通SLAB中获取内存。值得注意的是，对于kmalloc-8这些普通SLAB，都有一个对应的dma-kmalloc-8这种类型的普通SLAB，这种类型是专门使用了ZONE-DMA区域的内存，方便用于DMA模式申请内存。</p>\n</blockquote>\n<h3 id=\"关于SLAB着色\"><a href=\"#关于SLAB着色\" class=\"headerlink\" title=\"关于SLAB着色\"></a>关于SLAB着色</h3><blockquote>\n<p>看名字很难理解，其实又很好理解，我们知道内存需要处理时要先放入CPU硬件高速缓存中，而CPU硬件高速缓存与内存的映射方式有多种。在同一个kmem_cache中所有SLAB都是相同大小，都是相同连续长度的页框组成，这样的话在不同SLAB中相同对象号对于页框的首地址的偏移量也相同，这样有很可能导致不同SLAB中相同对象号的对象放入CPU硬件高速缓存时会处于同一行，当我们交替操作这两个对象时，CPU的cache就会交替换入换出，效率就非常差。SLAB着色就是在同一个kmem_cache中对不同的SLAB添加一个偏移量，就让相同对象号的对象不会对齐，也就不会放入硬件高速缓存的同一行中，提高了效率</p>\n</blockquote>\n<p>在SLAB描述符中，最重要的可能就是s_mem和freelist这两个指针。s_mem用于指向这段连续页框中第一个对象，freelist指向空闲对象链表。<br><img src=\"/img/slab2.jpg\" alt=\"第四张图\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://cloud.tencent.com/developer/article/1114226\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/article/1114226</a><br><a href=\"https://www.cnblogs.com/tolimit/p/4566189.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/tolimit/p/4566189.html</a><br><a href=\"https://blog.csdn.net/u013837209/article/details/56276809\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u013837209/article/details/56276809</a></p>\n","prev":{"title":"CVE-2012-0158的分析与利用","slug":"CVE-2012-0158的分析与利用"},"next":{"title":"CVE-2017-8890(Phoenix Talon)","slug":"CVE-2017-8890-Phoenix-Talon"},"link":"https://foyjog.github.io/post/linux内核下的内存管理笔记/"}