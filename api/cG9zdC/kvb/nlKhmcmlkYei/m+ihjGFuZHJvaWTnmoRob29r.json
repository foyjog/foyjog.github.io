{"title":"使用frida进行android的hook","date":"2019-03-22T11:30:37.000Z","slug":"使用frida进行android的hook","updated":"2019-03-22T11:44:38.351Z","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>frida是一个比较优秀的hook框架，xposed的框架对于frida来说，frida有着更加方便快捷的方式，其实我是不喜欢编写xposed框架和重启手机。这里使用frida进行hook测试，并解决2018年没有解决的ddctf第二题。</p>\n<h3 id=\"frida使用方式\"><a href=\"#frida使用方式\" class=\"headerlink\" title=\"frida使用方式\"></a>frida使用方式</h3><ol>\n<li>将frida-server push到手机中并运行。<a href=\"https://github.com/frida/frida/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/frida/frida/releases</a></li>\n<li>pip install frida</li>\n<li>就可以写代码进行hook了。<h3 id=\"ddctf第二题\"><a href=\"#ddctf第二题\" class=\"headerlink\" title=\"ddctf第二题\"></a>ddctf第二题</h3>这个题目没有so的问题，主要是使用了美团的一个robust框架对dex文件进行了热修复，找到关键的代码即可得出flag。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.chaitin.geektan.crackme;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View arg13)</span> </span>&#123;</span><br><span class=\"line\">        Class[] v3_2;</span><br><span class=\"line\">        Class v2_5;</span><br><span class=\"line\">        Object[] v0_3;</span><br><span class=\"line\">        Object[] v2_4;</span><br><span class=\"line\">        MainActivity$<span class=\"number\">1</span>Patch v2_2;</span><br><span class=\"line\">        MainActivity$<span class=\"number\">1</span> v2_1;</span><br><span class=\"line\">        MainActivity$<span class=\"number\">1</span> v1_1;</span><br><span class=\"line\">        MainActivity$<span class=\"number\">1</span>Patch v0_1;</span><br><span class=\"line\">        MainActivity$<span class=\"number\">1</span> v0;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v11 = <span class=\"number\">3</span>;</span><br><span class=\"line\">        Class[] v10 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v9 = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!EnhancedRobustUtils.invokeReflectStaticMethod(<span class=\"string\">\"isEmpty\"</span>, TextUtils.class, <span class=\"keyword\">this</span>.getRealParameter(<span class=\"keyword\">new</span> Object[]&#123;EnhancedRobustUtils.invokeReflectMethod(<span class=\"string\">\"getText\"</span>, v0, <span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>], v10, EditText.class)&#125;), <span class=\"keyword\">new</span> Class[]&#123;CharSequence.class&#125;).booleanValue()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> MainActivity$<span class=\"number\">1</span>Patch)) &#123;</span><br><span class=\"line\">                v0 = <span class=\"keyword\">this</span>.originClass;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!EnhancedRobustUtils.invokeReflectMethod(<span class=\"string\">\"equals\"</span>, v0, <span class=\"keyword\">this</span>.getRealParameter(<span class=\"keyword\">new</span> Object[]&#123;v1&#125;), <span class=\"keyword\">new</span> Class[]&#123;Object.class&#125;, String.class).booleanValue()) &#123;</span><br><span class=\"line\">                goto label_217;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>((<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> MainActivity$<span class=\"number\">1</span>Patch)) &#123;</span><br><span class=\"line\">                v0 = <span class=\"keyword\">this</span>.originClass;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                v0_1 = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            v0_2 = EnhancedRobustUtils.getFieldValue(<span class=\"string\">\"this$0\"</span>, v0, MainActivity$<span class=\"number\">1</span>.class);</span><br><span class=\"line\">            v2_4 = <span class=\"keyword\">new</span> Object[v11];</span><br><span class=\"line\">            v2_4[<span class=\"number\">0</span>] = v0_2;</span><br><span class=\"line\">            v2_4[<span class=\"number\">1</span>] = <span class=\"string\">\"恭喜大佬！密码正确！\"</span>;</span><br><span class=\"line\">            v2_4[v9] = <span class=\"keyword\">new</span> Integer(<span class=\"number\">0</span>);</span><br><span class=\"line\">            v0_3 = <span class=\"keyword\">this</span>.getRealParameter(v2_4);</span><br><span class=\"line\">            v2_5 = Toast.class;</span><br><span class=\"line\">            v3_2 = <span class=\"keyword\">new</span> Class[v11];</span><br><span class=\"line\">            v3_2[<span class=\"number\">0</span>] = Context.class;</span><br><span class=\"line\">            v3_2[<span class=\"number\">1</span>] = CharSequence.class;</span><br><span class=\"line\">            v3_2[v9] = Integer.TYPE;</span><br><span class=\"line\">            v0_2 = EnhancedRobustUtils.invokeReflectStaticMethod(<span class=\"string\">\"makeText\"</span>, v2_5, v0_3, v3_2);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((((MainActivity$<span class=\"number\">1</span>Patch)v0_2)) == <span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">                v0 = ((MainActivity$<span class=\"number\">1</span>Patch)v0_2).originClass;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            EnhancedRobustUtils.invokeReflectMethod(<span class=\"string\">\"show\"</span>, v0, <span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>], v10, Toast.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        label_217:</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> MainActivity$<span class=\"number\">1</span>Patch)) &#123;</span><br><span class=\"line\">                v0 = <span class=\"keyword\">this</span>.originClass;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                v0_1 = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            v0_2 = EnhancedRobustUtils.getFieldValue(<span class=\"string\">\"this$0\"</span>, v0, MainActivity$<span class=\"number\">1</span>.class);</span><br><span class=\"line\">            v2_4 = <span class=\"keyword\">new</span> Object[v11];</span><br><span class=\"line\">            v2_4[<span class=\"number\">0</span>] = v0_2;</span><br><span class=\"line\">            v2_4[<span class=\"number\">1</span>] = <span class=\"string\">\"大佬莫急！再试试！\"</span>;</span><br><span class=\"line\">            v2_4[v9] = <span class=\"keyword\">new</span> Integer(<span class=\"number\">0</span>);</span><br><span class=\"line\">            v0_3 = <span class=\"keyword\">this</span>.getRealParameter(v2_4);</span><br><span class=\"line\">            v2_5 = Toast.class;</span><br><span class=\"line\">            v3_2 = <span class=\"keyword\">new</span> Class[v11];</span><br><span class=\"line\">            v3_2[<span class=\"number\">0</span>] = Context.class;</span><br><span class=\"line\">            v3_2[<span class=\"number\">1</span>] = CharSequence.class;</span><br><span class=\"line\">            v3_2[v9] = Integer.TYPE;</span><br><span class=\"line\">            v0_2 = EnhancedRobustUtils.invokeReflectStaticMethod(<span class=\"string\">\"makeText\"</span>, v2_5, v0_3, v3_2);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((((MainActivity$<span class=\"number\">1</span>Patch)v0_2)) == <span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">                v0 = ((MainActivity$<span class=\"number\">1</span>Patch)v0_2).originClass;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            EnhancedRobustUtils.invokeReflectMethod(<span class=\"string\">\"show\"</span>, v0, <span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>], v10, Toast.class);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>观察代码可以很清晰的分析清楚<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!EnhancedRobustUtils.invokeReflectMethod(<span class=\"string\">\"equals\"</span>, v0, <span class=\"keyword\">this</span>.getRealParameter(<span class=\"keyword\">new</span> Object[]&#123;v1&#125;), <span class=\"keyword\">new</span> Class[]&#123;Object.class&#125;, String.class).booleanValue()) &#123;</span><br><span class=\"line\">              goto label_217;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这条语句是判断的核心，如果我们绕过该判断，就能获得flag了。所以我们可以hook invokeReflectMethod该方法，看看能不能hook到equals的参数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> frida, sys</span><br><span class=\"line\"></span><br><span class=\"line\">def on_message(message, data):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> message[<span class=\"string\">'type'</span>] == <span class=\"string\">'send'</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"[*] &#123;0&#125;\"</span>.format(message[<span class=\"string\">'payload'</span>]))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(message)</span><br><span class=\"line\"></span><br><span class=\"line\">jscode = <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">Java.perform(function () &#123;</span></span><br><span class=\"line\"><span class=\"string\">    // Function to hook is defined here</span></span><br><span class=\"line\"><span class=\"string\">    var EnhancedRobustUtils = Java.use('com.meituan.robust.utils.EnhancedRobustUtils');</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    // Whenever button is clicked</span></span><br><span class=\"line\"><span class=\"string\">    EnhancedRobustUtils.invokeReflectMethod.implementation = function (v1,v2,v3,v4,v5) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        // Show a message to know that the function got called</span></span><br><span class=\"line\"><span class=\"string\">        send('invokeReflectMethod');</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        console.log('v1:' + JSON.stringify(v1));</span></span><br><span class=\"line\"><span class=\"string\">        // Call the original onClick handler</span></span><br><span class=\"line\"><span class=\"string\">        var result =  this.invokeReflectMethod(v1,v2,v3,v4,v5);</span></span><br><span class=\"line\"><span class=\"string\">        if(v1 == \"</span>equals<span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            console.log('v2:' + v2);</span></span><br><span class=\"line\"><span class=\"string\">            console.log('v3:' + (v3));</span></span><br><span class=\"line\"><span class=\"string\">            console.log('v4:' + (v4));</span></span><br><span class=\"line\"><span class=\"string\">            console.log('v5:' + (v5));       </span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        return result;</span></span><br><span class=\"line\"><span class=\"string\">        // Set our values after running the original onClick handler</span></span><br><span class=\"line\"><span class=\"string\">        //this.m.value = 0;</span></span><br><span class=\"line\"><span class=\"string\">        //this.n.value = 1;</span></span><br><span class=\"line\"><span class=\"string\">        //this.cnt.value = 999;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // Log to the console that it's done, and we should have the flag!</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">    &#125;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br><span class=\"line\"><span class=\"string\">\"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">process = frida.get_usb_device().attach(<span class=\"string\">'cn.chaitin.geektan.crackme'</span>)</span><br><span class=\"line\">script = process.create_script(jscode)</span><br><span class=\"line\">script.on(<span class=\"string\">'message'</span>, on_message)</span><br><span class=\"line\">print(<span class=\"string\">'[*] Running CTF'</span>)</span><br><span class=\"line\">script.load()</span><br><span class=\"line\">sys.stdin.read()</span><br></pre></td></tr></table></figure></p>\n<p>运行后，可以得到如下flag：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[*] invokeReflectMethod</span><br><span class=\"line\">v1:&quot;equals&quot;</span><br><span class=\"line\">v2:tgg</span><br><span class=\"line\">v3:DDCTF&#123;2517299225169920&#125;</span><br><span class=\"line\">v4:class java.lang.Object</span><br><span class=\"line\">v5:class java.lang.String</span><br></pre></td></tr></table></figure></p>\n<p>第二种方法我们也可以hook toString该类。也能得到flag。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> frida, sys</span><br><span class=\"line\"></span><br><span class=\"line\">def on_message(message, data):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> message[<span class=\"string\">'type'</span>] == <span class=\"string\">'send'</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"[*] &#123;0&#125;\"</span>.format(message[<span class=\"string\">'payload'</span>]))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(message)</span><br><span class=\"line\"></span><br><span class=\"line\">jscode = <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">Java.perform(function () &#123;</span></span><br><span class=\"line\"><span class=\"string\">    // Function to hook is defined here</span></span><br><span class=\"line\"><span class=\"string\">    const StringBuilder = Java.use('java.lang.StringBuilder');</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    StringBuilder.toString.implementation = function () &#123;</span></span><br><span class=\"line\"><span class=\"string\">            var result = this.toString();</span></span><br><span class=\"line\"><span class=\"string\">            console.log('StringBuilder.toString(); =&gt; ' + result);</span></span><br><span class=\"line\"><span class=\"string\">            return result;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;);</span></span><br><span class=\"line\"><span class=\"string\">\"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">process = frida.get_usb_device().attach(<span class=\"string\">'cn.chaitin.geektan.crackme'</span>)</span><br><span class=\"line\">script = process.create_script(jscode)</span><br><span class=\"line\">script.on(<span class=\"string\">'message'</span>, on_message)</span><br><span class=\"line\">print(<span class=\"string\">'[*] Running CTF'</span>)</span><br><span class=\"line\">script.load()</span><br><span class=\"line\">sys.stdin.read()</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder.toString(); =&gt; ::false:6</span><br><span class=\"line\">StringBuilder.toString(); =&gt; ::false:6</span><br><span class=\"line\">StringBuilder.toString(); =&gt; DDCTF&#123;2517299225169920&#125;</span><br><span class=\"line\">StringBuilder.toString(); =&gt; ViewRootImpl[Toast]</span><br><span class=\"line\">StringBuilder.toString(); =&gt; aq:native-post-ime:Toast</span><br></pre></td></tr></table></figure></p>\n<p>frida也可以hook native层代码，后续更新。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://blog.csdn.net/jiangwei0910410003/article/details/80372118\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jiangwei0910410003/article/details/80372118</a><br><a href=\"https://www.frida.re/docs/examples/android/\" target=\"_blank\" rel=\"noopener\">https://www.frida.re/docs/examples/android/</a><br><a href=\"https://www.jianshu.com/p/ca8381d3e094\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ca8381d3e094</a></p>\n","next":{"title":"CVE-2012-1876分析记录","slug":"CVE-2012-1876分析记录"},"link":"https://foyjog.github.io/post/使用frida进行android的hook/"}